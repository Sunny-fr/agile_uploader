package com.efnx.utils{	/**	 * Copyright(C) 2007 Schell Scivally	 *	 * This file is one part of efnxAS3classes.	 * 	 * efnxAS3classes are free software; you can redistribute it and/or modify	 * it under the terms of the GNU General Public License as published by	 * the Free Software Foundation; either version 3 of the License, or	 * (at your option) any later version.	 * 	 * efnxAS3classes are distributed in the hope that it will be useful,	 * but WITHOUT ANY WARRANTY; without even the implied warranty of	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	 * GNU General Public License for more details.	 * 	 * You should get a copy of the GNU General Public License	 * at <http://www.gnu.org/licenses/>	 */	 	   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	  //	aquireResources is a class that handles getting resources [either from jpegs, pngs, gifs, animated gifs and soon mySQL DBs] //	 //  	and returns them in an array.						                             ////////////////////////////////////////////	/////////////////////////////////////////////////////////////////////////////////////////	 //	usage - aquireResources.someFunction();					    //	/////////////////////////////////////////////////////////////////		import flash.events.IOErrorEvent;	import flash.net.URLRequest;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.EventDispatcher;	import flash.display.Loader;		//////////////Uncomment to use Thibault Imbert's GIFPlayer to load animatedGIFs///////////////////////////////////////////////	/*import org.gif.player.GIFPlayer;	import org.gif.decoder.GIFDecoder;	import org.gif.events.GIFPlayerEvent;	import org.gif.events.FileTypeEvent;	import org.gif.events.FrameEvent;	import org.gif.events.TimeoutEvent;*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public class aquireResources extends EventDispatcher	{		private var test:Boolean;				protected var sendArray:Array = new Array();		protected var sourceArray:Array;		protected var loaded:int = 0;				//////////Uncomment to use Thibault Imbert's GIFPlayer to load animatedGIFs///////////////////////////////////////////////		//protected var gif:GIFPlayer = new GIFPlayer();				protected var loader:Loader = new Loader();				public static var LOADED:String = "complete";//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function aquireResources(_test:Boolean = false):void		{			test = _test;			if(test)trace("aquireResources:: init(): initialized.");		}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		//////////////Uncomment to use Thibault Imbert's GIFPlayer to load animatedGIFs///////////////////////////////////////////////		/*public  function aquireGIFs(_sourceArray:Array):void	//starts getting resources, assumes they are animated		{			sourceArray = _sourceArray;						// listen for the IOErrorEvent.IO_ERROR event, dispatched when the GIF fails to load			gif.addEventListener ( IOErrorEvent.IO_ERROR, onIOError, false, 0, true);							// listen for the GIFPlayerEvent.COMPLETE event, dispatched when GIF is loaded			gif.addEventListener ( GIFPlayerEvent.COMPLETE, onCompleteGIFLoad, false, 0, true );						// listen for the FileTypeEvent.INVALID event, dispatched when an invalid file is loaded			gif.addEventListener ( FileTypeEvent.INVALID, onInvalidFileLoaded, false, 0, true );						// listen timeout			gif.addEventListener ( TimeoutEvent.TIME_OUT, onTimeoutError, false, 0, true );						//we load the GIF			gif.load ( new URLRequest (sourceArray[0]) );		}*/		  ///////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ //	Below are gif functions, used for governing downloading, organization and transmission of images as bitmap arrays           \\/////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\			//////////////Uncomment to use Thibault Imbert's GIFPlayer to load animatedGIFs///////////////////////////////////////////////			/*protected  function onTimeoutError ( pEvt:TimeoutEvent ):void		{						if(test) trace("aquireResources::onTimeoutError(): Sorry, TIME_OUT error, please try another GIF file;");					}*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			//////////////Uncomment to use Thibault Imbert's GIFPlayer to load animatedGIFs///////////////////////////////////////////////				/*protected  function onInvalidFileLoaded ( pEvt:FileTypeEvent ):void		{						trace("aquireResources::onInvalidFileLoaded: Invalid file loaded !");					}*/		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////					protected  function onIOError ( pEvt:IOErrorEvent ):void				{			trace("aquireResources::onIOError: Sorry there was an error loading the file " + pEvt);		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		//////////////Uncomment to use Thibault Imbert's GIFPlayer to load animatedGIFs///////////////////////////////////////////////		/*protected  function onCompleteGIFLoad ( pEvt:GIFPlayerEvent ):void				{			var gifArray:Array = new Array();									if(pEvt.target.aFrames.length > 1)			{				for(var i:int = 0; i<pEvt.target.aFrames.length; i++)				{					gifArray.push(pEvt.target.aFrames[i].bitmapData);				}			}						sendArray.push(gifArray);						loaded++;						if(test) trace("aquireResources::onCompleteGIFLoad(): Loaded " + pEvt.target.aFrames.length + " frames of GIF #" + loaded);						if(loaded == sourceArray.length)			{				dispatchEvent(new Event(LOADED));			}else			{				gif.load(new URLRequest (sourceArray[loaded]));			}					}*/  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 //		here endeth the animated GIF loading functions																			  //	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			public  function aquireImages(_sourceArray:Array):void	//starts getting resources, assumes none are animated		{			sourceArray = _sourceArray;	//set sourceArray			if(test)trace("aquireResources::aquireImages(): aquiring images, sourceArray:" + sourceArray);						loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete, false, 0, true);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgress, false, 0, true);			//loader.contentLoaderInfo.addEventListener(TimeoutEvent.TIME_OUT, onTimeoutError, false, 0, true);						if(test)trace("aquireResources::aquireImages(): loading " + sourceArray[0]);			loader.load(new URLRequest(sourceArray[0]));	//load the first image!		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected function onProgress(event:ProgressEvent):void		{			if(test)trace("aquireResources::onProgress():" + "loaded" + event.bytesLoaded + " of " + sourceArray[loaded]);		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		protected function loadComplete(event:Event):void //pushes BitmapData into array and evetually dispatches LOADED when done		{			loaded++;						sendArray.push(Bitmap(loader.content).bitmapData);						if(loaded == sourceArray.length)			{				dispatchEvent(new Event(LOADED, true));			}else			{				if(test)trace("aquireResources::aquireImages::loadComplete: loading " + sourceArray[loaded]);				loader.load(new URLRequest (sourceArray[loaded]));			}					}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////						public function array():Array		{			return(sendArray);		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	}//end class}//end package		