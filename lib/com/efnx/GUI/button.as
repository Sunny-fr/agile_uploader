package com.efnx.GUI{	/**	 * Copyright(C) 2007 Schell Scivally	 *	 * This file is one part of efnxAS3classes.	 * 	 * efnxAS3classes are free software; you can redistribute it and/or modify	 * it under the terms of the GNU General Public License as published by	 * the Free Software Foundation; either version 3 of the License, or	 * (at your option) any later version.	 * 	 * efnxAS3classes are distributed in the hope that it will be useful,	 * but WITHOUT ANY WARRANTY; without even the implied warranty of	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	 * GNU General Public License for more details.	 * 	 * You should get a copy of the GNU General Public License	 * at <http://www.gnu.org/licenses/>	 */	 	/////////////////////////////////////////////////////////////////////////////////////////	//	button is a button that consists of three images and is either toggled or not     //	///////////////////////////////////////////////////////////////////////////////////////		import com.efnx.utils.Animation;	import com.efnx.utils.aquireResources;		import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.events.Event;	import flash.events.MouseEvent;	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	public class button extends Animation	{		public var isToggle:Boolean;		public var resources:aquireResources = new aquireResources();		public var functionToPerform:Function;				public static var toggled:int = 1;					[Embed(source = 'browse_up.png')]		private var browseUpClass:Class;		[Embed(source = 'browse_over.png')]		private var browseOverClass:Class;		[Embed(source = 'browse_down.png')]		private var browseDownClass:Class;		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		public function button(imagePathArray:Array, aFunction:Function = null, _toggle:Boolean = false):void		//sets toggle or not		{			isToggle = _toggle;			functionToPerform = aFunction;			buttonMode = true;						// If the images supplied weren't strings, they weren't specified so use embedded button graphics (this is SPECIFICALLY for Agile Uploader now)			if (typeof(imagePathArray[0]) != 'string') {								var browseUp:Bitmap = new browseUpClass();				var browseOver:Bitmap = new browseOverClass();				var browseDown:Bitmap = new browseDownClass();				bmdArray.push(browseUp.bitmapData);		//push up					bmdArray.push(browseOver.bitmapData);	//push over				bmdArray.push(browseDown.bitmapData);	//push down					appendFrameScript(1, animate);				appendFrameScript(2, animate);				appendFrameScript(3, animate);							gotoAndStop(1);							addEventListener(MouseEvent.MOUSE_OVER, mouseOver, false, 0, true);				addEventListener(MouseEvent.MOUSE_OUT, mouseOut, false, 0, true);				addEventListener(MouseEvent.MOUSE_DOWN, mouseDown, false, 0, true);				addEventListener(MouseEvent.MOUSE_UP, mouseUp, false, 0, true);						} else {				resources.aquireImages(imagePathArray);//get images from web				resources.addEventListener(aquireResources.LOADED, getBmds, false, 0, true);//set autocomplete			}		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		private function getBmds(event:Event):void		//gets and puts bmds in bmdArray, then sets up animation		{				resources.removeEventListener(aquireResources.LOADED, getBmds);			//push up and down images into bmdArray			bmdArray.push(resources.array()[0]);	//push up				bmdArray.push(resources.array()[1]);	//push over			bmdArray.push(resources.array()[2]);	//push down						appendFrameScript(1, animate);			appendFrameScript(2, animate);			appendFrameScript(3, animate);						gotoAndStop(1);						addEventListener(MouseEvent.MOUSE_OVER, mouseOver, false, 0, true);			addEventListener(MouseEvent.MOUSE_OUT, mouseOut, false, 0, true);			addEventListener(MouseEvent.MOUSE_DOWN, mouseDown, false, 0, true);			addEventListener(MouseEvent.MOUSE_UP, mouseUp, false, 0, true);		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		private function mouseOver(event:MouseEvent):void	//shows over on mouse over		{			gotoAndStop(2);		//show over			}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		private function mouseOut(event:MouseEvent):void		{			if(isToggle) 			{				if(toggled > 0)	//if up				{					gotoAndStop(1);	//go back to up				}else				{					gotoAndStop(3); //go back down				}			}else			{				gotoAndStop(1);	//show up			}		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		private function mouseDown(event:MouseEvent):void		{			if(isToggle) 			{					functionToPerform();				toggled *= -1;				if(toggled > 0)		//if up				{					gotoAndStop(1); //show up				}else				{					gotoAndStop(3); //show down				}			}else			{				gotoAndStop(3);		//show down			}		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		private function mouseUp(event:MouseEvent):void		{			// probably shouldn't have removed this, but it was creating errors...			/*if(isToggle)			{			}else			{				functionToPerform();	//execute function			}*/		}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	}//end class}//end package